# -*- coding: utf-8 -*-
"""Datathon2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CoPCVye1B2eqMsoDpTK1PSLWB1k7mBo7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

karatay=pd.read_csv("/content/karatay1-hava-kalitesi-1.csv")
meram=pd.read_csv("/content/meram-hava-kalitesi.csv")
selcuklu=pd.read_csv("/content/selcuklu-hava-kalitesi-1.csv")

karkent.head()

karatay.describe()

karatay=karatay.fillna(karatay.mean())
selcuklu=selcuklu.fillna(selcuklu.mean())
meram=meram.fillna(meram.mean())

karatay.isnull().sum()

karatay=karatay.drop(["Unnamed: 0"], axis=1)

karatay=pd.DataFrame(karatay)
selcuklu=pd.DataFrame(selcuklu)
meram=pd.DataFrame(meram)

meram.isnull().sum()

def kkirlilik(row):
  toplam=row.sum()
  kirlilik=(toplam/10)
  return kirlilik

def skirlilik(row):
  toplam=row.sum()
  kirlilik=(toplam/10)
  return kirlilik

def mkirlilik(row):
  toplam=row.sum()
  kirlilik=(toplam/10)
  return kirlilik

karatay=karatay.drop(["tarih_saat"], axis=1)
selcuklu=selcuklu.drop(["tarih_saat"],axis=1)
meram=meram.drop(["tarih_saat"],axis=1)

selcuklu.head()

karatay["kirlilik"]=karatay.apply(kkirlilik,axis=1)
selcuklu["kirlilik"]=selcuklu.apply(skirlilik,axis=1)
meram["kirlilik"]=meram.apply(mkirlilik,axis=1)

meram.head()

sns.kdeplot(karatay["kirlilik"],fill=True)

corr=selcuklu.corr()
fig,ax=plt.subplots(figsize=(10,8))
ax=sns.heatmap(corr,annot=True,fmt='.2f')

def derecelendirme(a):
  if a<50 and a>0:
    return 0
  if a>51 and a<100:
    return 1
  if a>101 and a<150:
    return 2
  if a>151 and a<200:
    return 3
  if a>201 and a<300:
    return 4
  if a>301 and a<500:
    return 5

ka=[]
kara=[]
for i in karatay.kirlilik.values:
  ka.append(int(i))
for j in ka:
    a=derecelendirme(j)
    kara.append(a)


se=[]
sel=[]
for i in selcuklu.kirlilik.values:
  se.append(int(i))
for j in se:
    a=derecelendirme(j)
    sel.append(a)

me=[]
mer=[]
for i in meram.kirlilik.values:
  me.append(int(i))
for j in me:
    a=derecelendirme(j)
    mer.append(a)

karatay["kirlilik"]=kara
meram["kirlilik"]=mer
selcuklu["kirlilik"]=sel

karatay.head()

selcuklu.isnull().sum()

karatay=karatay.dropna(how="any")
selcuklu=selcuklu.dropna(how="any")
meram=meram.dropna(how="any")

karatay.head()

meram.head()

sns.countplot(x="kirlilik",data=karatay,hue="kirlilik")
plt.show()

sns.countplot(x="kirlilik",data=selcuklu,hue="kirlilik")
plt.show()

sns.countplot(x="kirlilik",data=meram,hue="kirlilik")
plt.show()

karatay.isnull().sum()

data=karatay.dropna(how="any")

data.isnull().sum()

import sklearn
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
import xgboost as xgb

x=data.drop("kirlilik",axis=1)
y=data["kirlilik"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.44,random_state=52)

rfc=RandomForestClassifier(random_state=50, n_jobs=-1, criterion="entropy" ,max_depth=8,
                                       n_estimators=100, oob_score=True)
rfc.fit(x_train,y_train)

clf = MultinomialNB(force_alpha=True)
clf.fit(x_train,y_train)

lr=LogisticRegression(random_state=36) #logistik  regresyon sınıflandırma algoritmasını oluşturuyoruz
lr.fit(x_train,y_train) #lr algoritmasını train veri seti verilerel eğitiliyor

knn=KNeighborsClassifier(n_neighbors=5,algorithm="ball_tree",leaf_size=15,n_jobs=5) #En yakın komşu algoritmasını train veri seti verilerel eğitiliyor
knn.fit(x_train,y_train) #knn algoritmasını train veri seti verilerel eğitiliyor

y_pred = rfc.predict(x_test)
predict=lr.predict(x_test)
prediction=knn.predict(x_test)
clf_predict=clf.predict(x_test)

print('RFC accuracy score :',accuracy_score(y_test, y_pred))
print('LR accuracy score :',accuracy_score(y_test, predict))
print('KNN accuracy score :',accuracy_score(y_test, prediction))
print('KNN accuracy score :',accuracy_score(y_test, clf_predict))

import pickle

with open('aaaaaa.pkl', 'wb') as files:
    pickle.dump(knn, files)